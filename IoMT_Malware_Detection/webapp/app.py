from flask import Flask, render_template, request, flash, redirect, url_for
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
import pandas as pd
from sklearn.ensemble import IsolationForest
from io import StringIO
from email.mime.text import MIMEText
import matplotlib
matplotlib.use('Agg')  # Use a non-GUI backend
import matplotlib.pyplot as plt
import smtplib
import os
import plotly.express as px
import io
import base64
import json
import re

app = Flask(__name__)
app.secret_key = '1234567890'  # Change this to a secure, random secret key
login_manager = LoginManager()
login_manager.init_app(app)

# Load users from a JSON file
def load_users():
    if os.path.exists('users.json'):
        with open('users.json', 'r') as f:
            return json.load(f)
    return {}

# Save users to a JSON file
def save_users(users):
    with open('users.json', 'w') as f:
        json.dump(users, f)

# User database simulation
users = load_users()  # Load users from the file
active_users = []  # List to track active users

class User(UserMixin):
    def __init__(self, email, role):
        self.email = email
        self.role = role

    def get_id(self):
        return self.email

@login_manager.user_loader
def load_user(email):
    if email in users:
        user_data = users[email]
        # Ensure `user_data` is a dictionary and contains the expected fields
        if isinstance(user_data, dict) and 'role' in user_data:
            return User(email, user_data['role'])
        else:
            print(f"Error: `users[{email}]` is not a dictionary or lacks 'role' key.")
    return None

@login_manager.unauthorized_handler
def handle_needs_login():
    return render_template('unauthorized.html'), 401

@app.errorhandler(401)
def unauthorized(e):
    return render_template('unauthorized.html'), 401

# Function to validate email format
def is_valid_email(email):
    email_regex = r'^[a-zA-Z0-9._%+-]+@gmail\.com$'  # Update to only allow Gmail addresses
    return re.match(email_regex, email) is not None

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        email = request.form['username']  # Use email as username
        password = request.form['password']
        
        # Check if email is valid
        if not is_valid_email(email):
            flash('Invalid email format. Please use a Gmail address.', 'danger')
        elif email in users:
            flash('Email already registered!', 'danger')
        else:
            # Default role is user; you can extend this with admin logic
            users[email] = {'password': password, 'role': 'user'}
            save_users(users)  # Save users after registration
            flash('Registration successful! You can now log in.', 'success')
            return redirect(url_for('login'))
    return render_template('register.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        email = request.form['username']  # Use email as username
        password = request.form['password']
        
        user_data = users.get(email)  # Safely get user data
        if user_data and user_data.get('password') == password:
            role = user_data.get('role')
            user = User(email, role)
            login_user(user)
            active_users.append(email)
            
            if role == 'admin':
                return redirect(url_for('admin_dashboard'))
            else:
                return redirect(url_for('index'))
        else:
            flash('Invalid email or password', 'danger')
    
    return render_template('login.html')

@app.route('/logout', methods=['POST'])
@login_required
def logout():
    # Attempt to remove the user from the active users list
    if current_user.get_id() in active_users:
        active_users.remove(current_user.get_id())
    
    logout_user()
    return redirect(url_for('login'))

@app.route('/active_users')
def active_users_count():
    return f"Currently active users: {len(active_users)}"

@app.route('/')
@login_required
def index():
    active_user_count = len(active_users)
    return render_template('index.html', active_user_count=active_user_count)

def send_alert(anomaly_data, severity_chart_img, trend_chart_html, user_email):
    # Create the HTML email content
    email_body = f"""
    <html>
    <body>
        <h2>Anomaly Detected in IoMT Device Data</h2>
        <div>{anomaly_data}</div>
        
        <h3>Severity Distribution</h3>
        <div><img src="data:image/png;base64,{severity_chart_img}" alt="Severity Distribution Chart" /></div>
        
        <h3>Anomaly Trend Over Time</h3>
        <div>{trend_chart_html if trend_chart_html else "<p>No trend data available.</p>"}</div>
    </body>
    </html>
    """
    
    msg = MIMEText(email_body, 'html')
    msg['Subject'] = 'IoMT Anomaly Alert'
    msg['From'] = 'sathishsaravanan321@gmail.com'
    msg['To'] = user_email

    try:
        with smtplib.SMTP('smtp.gmail.com', 587) as server:
            server.starttls()
            server.login('sathishsaravanan321@gmail.com', 'your_app_password')  # Use an app password here
            server.send_message(msg)
            print("Alert sent successfully.")
    except Exception as e:
        print(f"Failed to send alert: {e}")

def log_anomaly(data):
    log_file = 'anomaly_log.csv'
    if not os.path.exists(log_file):
        with open(log_file, 'w') as f:
            f.write("network_traffic,health_metric,prediction\n")  # Write header
    data.to_csv(log_file, mode='a', header=False, index=False)

@app.route('/predict', methods=['POST'])
@login_required
def predict():
    file = request.files['file']
    if not file:
        return "No file uploaded.", 400

    data = pd.read_csv(StringIO(file.read().decode('utf-8')))
    
    model = IsolationForest(contamination=0.1)
    model.fit(data[['network_traffic', 'health_metric']])

    data['prediction'] = model.predict(data[['network_traffic', 'health_metric']])
    data['prediction'] = data['prediction'].apply(lambda x: 'Anomaly' if x == -1 else 'Normal')
    data['severity'] = data.apply(lambda row: 'High' if row['network_traffic'] > 2 else 'Medium' if row['network_traffic'] > 1 else 'Low', axis=1)
    
    fig_severity, ax_severity = plt.subplots()
    try:
        severity_counts = data['severity'].value_counts()
        severity_counts.plot(kind='bar', ax=ax_severity, color=['red', 'orange', 'green'])
        severity_img = io.BytesIO()
        plt.savefig(severity_img, format='png')
        plt.close(fig_severity)
        severity_img.seek(0)
        severity_chart_img = base64.b64encode(severity_img.getvalue()).decode()
    except Exception as e:
        print(f"Error creating severity chart: {e}")
        severity_chart_img = None

    fig_trend = None
    try:
        data['timestamp'] = pd.to_datetime('now')
        trend_data = data.groupby(data['timestamp'].dt.date)['prediction'].apply(lambda x: (x == 'Anomaly').sum())
        fig_trend = px.line(x=trend_data.index, y=trend_data.values, labels={'x': 'Date', 'y': 'Anomaly Count'}, title='Anomaly Trend Over Time')
        trend_chart_html = fig_trend.to_html(full_html=False)
    except Exception as e:
        print(f"Error creating trend chart: {e}")
        trend_chart_html = None

    log_anomaly(data[data['prediction'] == 'Anomaly'])
    anomaly_data = data.to_html(classes='table table-striped', index=False)
    send_alert(anomaly_data, severity_chart_img, trend_chart_html, current_user.get_id())

    table = data.to_html(classes='table table-striped', index=False)
    return render_template('result.html', table=table, severity_chart_img=severity_chart_img, trend_chart_html=trend_chart_html)

@app.route('/dashboard')
@login_required
def dashboard():
    log_file = 'anomaly_log.csv'
    if not os.path.exists(log_file):
        return "No anomaly log data found."

    anomaly_data = pd.read_csv(log_file, encoding='utf-8', on_bad_lines='skip')
    total_anomalies = len(anomaly_data)
    traffic_summary = anomaly_data['network_traffic'].describe()
    health_summary = anomaly_data['health_metric'].describe()

    traffic_bins = pd.cut(anomaly_data['network_traffic'], bins=[0, 0.5, 1, 1.5, 2, 2.5, 3])
    traffic_range_counts = traffic_bins.value_counts().sort_index()

    summary = {
        'total_anomalies': total_anomalies,
        'traffic_summary': traffic_summary,
        'health_summary': health_summary,
        'traffic_range_counts': traffic_range_counts.to_dict()
    }

    return render_template('dashboard.html', summary=summary)

@app.route('/admin_dashboard')
@login_required
def admin_dashboard():
    if current_user.role != 'admin':
        return render_template('unauthorized.html'), 401
    
    log_file = 'anomaly_log.csv'
    if not os.path.exists(log_file):
        return render_template('admin_dashboard.html', summary=None)  # Pass None if log file doesn't exist

    anomaly_data = pd.read_csv(log_file, encoding='utf-8', on_bad_lines='skip')
    total_anomalies = len(anomaly_data)
    traffic_summary = anomaly_data['network_traffic'].describe()
    health_summary = anomaly_data['health_metric'].describe()

    traffic_bins = pd.cut(anomaly_data['network_traffic'], bins=[0, 0.5, 1, 1.5, 2, 2.5, 3])
    traffic_range_counts = traffic_bins.value_counts().sort_index()

    summary = {
        'total_anomalies': total_anomalies,
        'traffic_summary': traffic_summary,
        'health_summary': health_summary,
        'traffic_range_counts': traffic_range_counts.to_dict()
    }

    return render_template('admin_dashboard.html', summary=summary)


if __name__ == '__main__':
    app.run(debug=True)
